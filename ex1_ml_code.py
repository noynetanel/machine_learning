# -*- coding: utf-8 -*-
"""ex1_ml_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nnasOAZ8i-u5tuTzgn7_LX6jtAz2FShE
"""

from sklearn.datasets import fetch_openml
import numpy as np
from matplotlib import pyplot as plt
from scipy.spatial import distance


# Section a function
def k_nearest(train_images, labels_vector, query_image, k):
    distances = distance.cdist(train_images, [query_image], 'euclidean').flatten()  # calc the euclidean distance
    k_nearest_index = np.argsort(distances)[:k]  # take the k nearest neighbors - shortest distances
    k_nearest_labels = [(train_labels[ind]) for ind in k_nearest_index]  # give the labels of the k nearest
    k_nearest_labels.sort()
    return max(k_nearest_labels, key=k_nearest_labels.count)  # return the most frequent one


#   Section c function, now n=1000, and k increases
def accuracy_k_changes(k):
    sum_accurate = 0
    for ind in range(1000):
        if k_nearest(less_train_image, less_labels, test[ind], k) == test_labels[ind]:
            sum_accurate += 1
    return sum_accurate / 1000  # n = 100 so the accuracy of the prediction is the sum divided by 1000


#   Section d function, now k=1, and n increases
def accuracy_n_changes(n_train_images, n_train_labels):
    sum_accurate = 0
    for i in range(1000):
        if k_nearest(n_train_images, n_train_labels, test[i], 1) == test_labels[i]:
            sum_accurate += 1
    return sum_accurate / 1000


# load MNIST dataset
mnist = fetch_openml('mnist_784', as_frame=False)
data = mnist['data']
labels = mnist['target']
# Define the training and test set of images
idx = np.random.RandomState(0).choice(70000, 11000)
train = data[idx[:10000], :].astype(int)
train_labels = labels[idx[:10000]]
test = data[idx[10000:], :].astype(int)
test_labels = labels[idx[10000:]]
# used to run next sections
less_train_image = train[:1000]
less_labels = train_labels[:1000]

# section b run, n = 10000, k= 10
sum_accurate = 0
for i in range(1000):
    if k_nearest(less_train_image, less_labels, test[i], 10) == test_labels[i]:
        sum_accurate += 1
print("prediction accuracy: " + str(sum_accurate / 1000))  # print the accuracy

# section c run, k=1,...,100  n=1000
accuracy = [(accuracy_k_changes(k)) for k in range(1, 101)]
plt.plot(np.arange(1, 101), accuracy)
plt.title("accuracy of prediction when k changes")
plt.xlabel('k')
plt.ylabel('accuracy')
plt.show()

# section d run, k=1, n=100,200,....,5000
accuracy_n = [(accuracy_n_changes(train[:n], train_labels[:n])) for n in range(100, 5100, 100)]
plt.plot(np.arange(100, 5100, 100), accuracy_n)
plt.title("accuracy of prediction when n changes")
plt.xlabel('n')
plt.ylabel('accuracy')
plt.show()